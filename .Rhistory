if (y[k - 1] < y[k] & y[k + 1] < y[k]) {
modes = modes + 1
if (modes > 2) {
return()
}
}
}
if (modes == 2) {
b = TRUE
}
}
bimodtest(h, T)
if(T) {print('hello')}
if(F) {print('no')}
bimodtest <- function(y, debug = FALSE) {
# test if a histogram is bimodal
# in:
# y histogram
# out
# true if histogram is bimodal, otherwise false
# this script is ported from the original matlab code by Antti Niemistro
# GNU General Public License
y <- y$counts
len <- length(y)
b <- FALSE
modes = 0
# count the number of modes of the histogram in a loop.
# If the number exceeds 2, return with boolean value false.
for (k in 2:len - 1) {
if (debug) {print(k)} # debug statement
if (y[k - 1] < y[k] & y[k + 1] < y[k]) {
modes = modes + 1
if (modes > 2) {
return()
}
}
}
if (modes == 2) {
b = TRUE
}
}
bimodtest(h, T)
bimodtest <- function(y, debug = FALSE) {
# test if a histogram is bimodal
# in:
# y histogram
# out
# true if histogram is bimodal, otherwise false
# this script is ported from the original matlab code by Antti Niemistro
# GNU General Public License
y <- y$counts
len <- length(y)
if (debug) {print(len)}
b <- FALSE
modes = 0
# count the number of modes of the histogram in a loop.
# If the number exceeds 2, return with boolean value false.
for (k in 2:len - 1) {
if (debug) {print(k)} # debug statement
if (y[k - 1] < y[k] & y[k + 1] < y[k]) {
modes = modes + 1
if (modes > 2) {
return()
}
}
}
if (modes == 2) {
b = TRUE
}
}
bimodtest(h, T)
source('~/igb/bimodtest.R')
source('~/igb/bimodtest.R')
bimodtest(h, T)
source('~/igb/bimodtest.R', echo=TRUE)
source('~/igb/bimodtest.R')
bimodtest(h, T)
2:10
for (k in 2:10) { print(k)}
source('~/igb/bimodtest.R')
bimodtest(h, T)
source('~/igb/bimodtest.R')
bimodtest(h, T)
rm(i,im,k,y,init)
source('~/igb/bimodtest.R')
bimodtest(h)
str(h)
h
str(h)
source('~/igb/bimodtest.R')
bimodtest(h,F)
bimodtest(h)
bimodtest(h, T)
hi <- h
h <- matrix(1, 3)/3
h
length(h)
str(hi)
?convolve
convolve([1,3,1], [4, 5, 6])
convolve((1,3,1), (4, 5, 6))
convolve(c(1,3,1), c(4, 5, 6))
a <- c(1,2,1,3)
b <- c(2,0,1)
convolve(a,b)
convolve(a,b, type = "filter")
convolve(a,b, type = "open")
convolve(a,b, conj = F, type = "open")
convolve(b, a, type = "filter")
convolve(b, a, type = "open")
convolve(a, b, type = "filter")
convolve(a, b, type = "open")
a
b
convolve(b, a)
convolution <- function(A, B) {
# Computes the convolution of two vectors.
#
# Args:
#   A, B: column vectors representing polynomial coefficients.
#
# Returns:
#   The coefficient vector resulting from multiplying the polynomial
#   represented by A by the polynomial represented by B.
Ap <- c(A, B*0)
Bp <- c(B, A*0)
C <- fft(Ap) * fft(Bp)
D <- round(fft(C, inverse=T))
E <- as.numeric(D)
R <- E/(length(A)+length(B))
return(R)
}
zeroes <- function(Z) {
if (length(Z) == 1) {
return(c(1, -Z[1]))
}
ml <- length(Z) / 2
mr <- ml + 1
A <- zeroes(Z[1:ml])
B <- zeroes(Z[mr:length(Z)])
return(convolution(A, B))
}
# Example
A <- c(1,2,3,4)
B <- c(5,6,7,8)
print(convolution(A, B))
convolution(a,b)
rm(A,B)
rm(zeroes)
convolution(a,b)
convolution <- function(A, B) {
# Computes the convolution of two vectors.
#
# Args:
#   A, B: column vectors representing polynomial coefficients.
#
# Returns:
#   The coefficient vector resulting from multiplying the polynomial
#   represented by A by the polynomial represented by B.
Ap <- c(A, B*0)
Bp <- c(B, A*0)
C <- fft(Ap) * fft(Bp)
D <- round(fft(C, inverse=T))
E <- as.numeric(D)
R <- E/(length(A)+length(B))
return(R)
}
convolution(a, b)
str(hi)
convolution(b, a)
t <- convolution(hi$counts, matrix(1, 3)/3)
length(t)
t[1:10]
rm(init)
# that package might be better
init <- function() {
library(imager)
I <- load.image(file = "C:\\Users\\me\\Downloads\\hemiphoto.JPG")
I <- B(I)
I <- as.vector(I)
I <- I*255
h <- hist(x = I,
breaks = 255,
col = 'blue',
main = 'Histogram of Blue Band',
xlab = 'Value',
ylab = 'Number of pixels')
return(h)
}
init()
init <- function() {
library(imager)
I <- load.image(file = "C:\\Users\\me\\Documents\\igb\\hemiphoto.JPG")
I <- B(I)
I <- as.vector(I)
I <- I*255
h <- hist(x = I,
breaks = 255,
col = 'blue',
main = 'Histogram of Blue Band',
xlab = 'Value',
ylab = 'Number of pixels')
return(h)
}
init()
init <- function() {
library(imager)
file_path = "C:\\Users\\me\\Documents\\igb\\cameraman.png"
I <- load.image(file = file_path)
I <- B(I)
I <- as.vector(I)
I <- I*255
h <- hist(x = I,
breaks = 255,
col = 'blue',
main = 'Histogram of Blue Band',
xlab = 'Value',
ylab = 'Number of pixels')
return(h)
}
rm(h,hi,t)
h <- init()
str(h)
bimodtest(h)
rand(1)
rand(3)
?random
??random
runif(3)
bimodtest(h$counts)
hist(runif(333))
hist(runif(753764))
test$counts <- "hello"
length(h$counts)
h$counts <- runif(243)
bimodtest(h)
str(h)
summary(h$counts)
bimodtest(h)
h$counts <- runif(243)
bimodtest(h)
h <- init()
str(h)
bimodtest(h)
rnorm(12)
hist(rnorm(12))
hist(rnorm(243))
h$counts <- rnorm(243)
bimodtest(h)
plot(h)
hist(h$counts)
h$counts <- rnorm(n = 243, mean = 255/2)
hist(h$counts)
h$counts <- rnorm(n = 243, mean = 255)
hist(h$counts)
h$counts <- rnorm(n = 243, mean = 255/2)
hist(h$counts)
bimodtest(h)
bimodtest(h,T)
install.packages("diptest")
diptest::dip(h$counts)
diptest::dip.test(x = h&counts)
diptest::dip.test(x = h$counts)
hist(h$counts)
hist(rnorm(22222))
diptest::dip.test(x = rnorm(22222))
diptest::dip.test(x = rnorm(22222))
diptest::dip.test(x = rnorm(22222))
diptest::dip.test(x = rnorm(22222))
diptest::dip.test(x = rnorm(22222))
?diptest::dip.test
hist(c(0,0,1,1))
diptest::dip.test(c(0,0,1,1))
?diptest::dip.test
plot(rnorm(11111))
hist(rnorm(11111))
diptest::dip.test(rnorm(1222))
hist(rnorm(11111), breaks = 255)
hist(rnorm(11111), breaks = 255)
hist(rnorm(11111), breaks = 255)
hist(rnorm(11111), breaks = 255)
hist(rnorm(11111), breaks = 255)
hist(rnorm(11111), breaks = 255)
hist(rnorm(11111), breaks = 255)
hist(rnorm(11111), breaks = 255)
hist(rnorm(11111), breaks = 255)
hist(rnorm(11111), breaks = 255)
hist(rnorm(11111), breaks = 255)
hist(rnorm(11111), breaks = 255)
hist(rnorm(11111), breaks = 255)
hist(rnorm(11111), breaks = 255)
hist(rnorm(11111), breaks = 255)
hist(rnorm(11111), breaks = 255)
hist(rnorm(11111), breaks = 255)
hist(rnorm(11111), breaks = 255)
hist(rnorm(11111), breaks = 255)
hist(rnorm(11111), breaks = 255)
hist(rnorm(11111), breaks = 255)
hist(rnorm(11111), breaks = 255)
rnorm(12)
hist(rnorm(12))
h$counts <- rnorm(12)
bimodtest(h)
hist(h$counts)
h$counts <- rnorm(12)
hist(h$counts)
h$counts <- rnorm(6)
hist(h$counts)
bimodtest(h)
bimodtest()
bimodtest(h)
source('~/igb/bimodtest.R')
bimodtest(h)
dip.test(rnorm(12))
diptest::dip.test(rnorm(11))
diptest::dip.test(rnorm(11))
diptest::dip.test(rnorm(11))
print('hello') & print('hello')
temp <- rnorm(12) & hist(temp) & diptest::dip.test(x = temp)
temp <- rnorm(12) & hist(temp) & diptest::dip.test(x = temp)
print('hi') ; print('no')
print('hi') ; print('no')
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
diptest::dip.test(h$counts)
?dip.test
h <- init()
bimodtest(h)
hist(rnorm(122))
hist(rnorm(122),breaks = 100)
hist(rnorm(122222),breaks = 100)
n <- rnorm(100000)
str(n)
plot(n)
rnorm(10)
mean(rnorm(10))
mean(rnorm(10))
mean(rnorm(10))
mean(rnorm(10))
mean(rnorm(10))
rnorm(10)
mean(rnorm(10))
rnorm(10)
mean(rnorm(10))
rnorm(10)
mean(rnorm(10))
mean(rnorm(10))
mean(rnorm(10))
mean(rnorm(10))
mean(rnorm(10))
mean(rnorm(10))
mean(rnorm(10))
a
b
convolution(a,b)
convolution(a,b,debug=T)
source('~/igb/convolution.R')
convolution(a,b)
convolution(a,b,same=F)
convolution(a,b,same=T)
imager::load.image(file = "~/igb/cameraman.png") -> im
plot(im)
imager::threshold(im) %>% plot
imager::threshold(im) %>% plot()
imager::threshold(im) -> out
plot(out)
plot(im)
imager::threshold(im) %>% plot
plot(imager::threshold(im))
convolution(a,b)
convolution(a,b,same=T,debug=T)
source('~/igb/convolution.R')
source('~/igb/convolution.R')
convolution(a,b,same=T,debug=T)
aa <- a
aa
aa[:]
aa[length(aa)+1] <- 44
aa[length(aa)+1] <- NULL
aa[length(aa)+1] <- NA
source('~/igb/convolution.R')
source('~/igb/convolution.R')
aa[1:5]
source('~/igb/convolution.R')
convolution(a,b,same=T,debug=T)
aa<- aa[1:5]
convolution(aa,b,same=T)
source('~/igb/convolution.R')
source('~/igb/th_minimum.R')
threshold() -> tout
rm(list=ls())
source('~/igb/th_minimum.R')
threshold() -> output
setwd("~/igb/")
list.files()
threshold() -> tout
t
??imager::threshold
im <- imager::load.image("~/igb/cameraman.png")
imager::threshold(im = im, thr = 75) -> tthresh
plot(tthresh)
imager::threshold(im = im, thr = .75) -> tthresh
plot(tthresh)
imager::threshold(im = im, thr = 75/255) -> tthresh
plot(imager::threshold(im = im, thr = 75/255))
plot(imager::threshold(im = im, thr = "auto"))
plot(imager::threshold(im = im, thr = 75/255))
plot(im)
im <- "~/igb/hemiphoto.JPG"
plot(im)
im <- imager::load.image(im)
plot(im)
fp <- "~/igb/hemiphoto.JPG"
system.time(imager::threshold(im = im, thr = threshold(fp)))
threshold(I = fp)
threshold()
system.time(threshold())
source('~/igb/convolution.R')
source('~/igb/th_minimum.R')
plot(im)
fp
threshold(fp)
threshold(I = file.choose())
im <- imager::image.load("~/igb/test_photos/004_1_Oct3_2015_GOPRO002.JPG")
im <- imager::load.image("~/igb/test_photos/004_1_Oct3_2015_GOPRO002.JPG")
plot(im)
fp
plot(imager::threshold(im = im, thr = 54))
plot(imager::threshold(im = im, thr = 54/255))
plot(imager::threshold(im = B(im), thr = 54/255))
plot(im)
plot(imager::threshold(im = B(im)))
size(im)
dim(im)
im
rm(list=ls())
lss()
img <- matrix(sample(c(1, 0), 1000000, replace = TRUE), ncol = 1000, nrow = 1000)
?image
image(0:1000, 0:1000, img)
library(reshape2)
library("reshape2")
install.packages("reshape2")
?reshape2::melt
img2 <- melt(id.var = 1:nrow(img), img)
img2 <- reshape2::melt(id.var = 1:nrow(img), img)
head(img2)
head(img)
head(img)
head(img2)
names(img2) <- c("rows", "cols", "z")
head(img2)
center <- c(500,500)
r <- 50
img <- img2; rm(img2)
img$z[sqrt((img$rows - center[1])^2 + (img$cols - center[2])^2) > r] = -1
head(img)
image(1:1000, 1:1000, matrix(img$z, nrow=1000, byrow=F), col=c("gray80", "green", "red"))
source('~/igb/th_minimum.R')
source('~/igb/th_minimum.R')
source('~/igb/th_minimum.R')
source('~/igb/bimodtest.R')
source('~/igb/convolution.R')
source('~/igb/th_minimum.R')
rm(list=ls())
source("th_minimum.R")
rm(threshold())
rm(threshold)
