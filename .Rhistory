I <- load.image(file = "C:\\Users\\me\\Documents\\igb\\hemiphoto.JPG")
I <- B(I)
I <- as.vector(I)
I <- I*255
h <- hist(x = I,
breaks = 255,
col = 'blue',
main = 'Histogram of Blue Band',
xlab = 'Value',
ylab = 'Number of pixels')
return(h)
}
init()
init <- function() {
library(imager)
file_path = "C:\\Users\\me\\Documents\\igb\\cameraman.png"
I <- load.image(file = file_path)
I <- B(I)
I <- as.vector(I)
I <- I*255
h <- hist(x = I,
breaks = 255,
col = 'blue',
main = 'Histogram of Blue Band',
xlab = 'Value',
ylab = 'Number of pixels')
return(h)
}
rm(h,hi,t)
h <- init()
str(h)
bimodtest(h)
rand(1)
rand(3)
?random
??random
runif(3)
bimodtest(h$counts)
hist(runif(333))
hist(runif(753764))
test$counts <- "hello"
length(h$counts)
h$counts <- runif(243)
bimodtest(h)
str(h)
summary(h$counts)
bimodtest(h)
h$counts <- runif(243)
bimodtest(h)
h <- init()
str(h)
bimodtest(h)
rnorm(12)
hist(rnorm(12))
hist(rnorm(243))
h$counts <- rnorm(243)
bimodtest(h)
plot(h)
hist(h$counts)
h$counts <- rnorm(n = 243, mean = 255/2)
hist(h$counts)
h$counts <- rnorm(n = 243, mean = 255)
hist(h$counts)
h$counts <- rnorm(n = 243, mean = 255/2)
hist(h$counts)
bimodtest(h)
bimodtest(h,T)
install.packages("diptest")
diptest::dip(h$counts)
diptest::dip.test(x = h&counts)
diptest::dip.test(x = h$counts)
hist(h$counts)
hist(rnorm(22222))
diptest::dip.test(x = rnorm(22222))
diptest::dip.test(x = rnorm(22222))
diptest::dip.test(x = rnorm(22222))
diptest::dip.test(x = rnorm(22222))
diptest::dip.test(x = rnorm(22222))
?diptest::dip.test
hist(c(0,0,1,1))
diptest::dip.test(c(0,0,1,1))
?diptest::dip.test
plot(rnorm(11111))
hist(rnorm(11111))
diptest::dip.test(rnorm(1222))
hist(rnorm(11111), breaks = 255)
hist(rnorm(11111), breaks = 255)
hist(rnorm(11111), breaks = 255)
hist(rnorm(11111), breaks = 255)
hist(rnorm(11111), breaks = 255)
hist(rnorm(11111), breaks = 255)
hist(rnorm(11111), breaks = 255)
hist(rnorm(11111), breaks = 255)
hist(rnorm(11111), breaks = 255)
hist(rnorm(11111), breaks = 255)
hist(rnorm(11111), breaks = 255)
hist(rnorm(11111), breaks = 255)
hist(rnorm(11111), breaks = 255)
hist(rnorm(11111), breaks = 255)
hist(rnorm(11111), breaks = 255)
hist(rnorm(11111), breaks = 255)
hist(rnorm(11111), breaks = 255)
hist(rnorm(11111), breaks = 255)
hist(rnorm(11111), breaks = 255)
hist(rnorm(11111), breaks = 255)
hist(rnorm(11111), breaks = 255)
hist(rnorm(11111), breaks = 255)
rnorm(12)
hist(rnorm(12))
h$counts <- rnorm(12)
bimodtest(h)
hist(h$counts)
h$counts <- rnorm(12)
hist(h$counts)
h$counts <- rnorm(6)
hist(h$counts)
bimodtest(h)
bimodtest()
bimodtest(h)
source('~/igb/bimodtest.R')
bimodtest(h)
dip.test(rnorm(12))
diptest::dip.test(rnorm(11))
diptest::dip.test(rnorm(11))
diptest::dip.test(rnorm(11))
print('hello') & print('hello')
temp <- rnorm(12) & hist(temp) & diptest::dip.test(x = temp)
temp <- rnorm(12) & hist(temp) & diptest::dip.test(x = temp)
print('hi') ; print('no')
print('hi') ; print('no')
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
temp <- rnorm(12) ; hist(temp) ; diptest::dip.test(x = temp)
diptest::dip.test(h$counts)
?dip.test
h <- init()
bimodtest(h)
hist(rnorm(122))
hist(rnorm(122),breaks = 100)
hist(rnorm(122222),breaks = 100)
n <- rnorm(100000)
str(n)
plot(n)
rnorm(10)
mean(rnorm(10))
mean(rnorm(10))
mean(rnorm(10))
mean(rnorm(10))
mean(rnorm(10))
rnorm(10)
mean(rnorm(10))
rnorm(10)
mean(rnorm(10))
rnorm(10)
mean(rnorm(10))
mean(rnorm(10))
mean(rnorm(10))
mean(rnorm(10))
mean(rnorm(10))
mean(rnorm(10))
mean(rnorm(10))
source('~/igb/th_minimum.R')
source('~/igb/th_minimum.R')
library(imager)
load.image(file.choose())
image <- load.image("C:\Users\me\Documents\igb\cameraman.png")
image <- load.image("C:\\Users\\me\\Documents\\igb\\cameraman.png")
size(image)
dim(image)
str(image)
bimage <- B(image)
dim(image)
dim(bimage)
image[1:10]
mimage <- as.matrix(bimage)
mimage[1:10]
bimage[1:10, 1:10]
bimage[1:10, 1:10]*255
??transpose
t(bimage[1:10, 1:10]*255)
rm(mimage)
t(image[1:10, 1:10, 1]*255)
t(image[1:10, 1:10, 1]*255) == t(image[1:10, 1:10, 1]*255)
all(t(image[1:10, 1:10, 1]*255) == t(image[1:10, 1:10, 1]*255))
all(image[:,:,1]*255 == image[:,:,1])
all(image[,,1]*255 == image[,,1])
all(image[1:10,1:10,1]*255 == image[1:10,1:10,1])
all(image[1:10,1:10,1]*255 == image[1:10,1:10,1]*255
)
all(image[1:10,1:10,1]*255 == image[1:10,1:10,1]*255)
all(image[,,1]*255 == image[,,1]*255)
all(image[,,1]*255 == image[,,2]*255)
all(image[,,1]*255 == image[,,3]*255)
bimodtest(h)
source('~/igb/th_minimum.R')
source('~/igb/th_minimum.R')
source('~/igb/th_minimum.R')
?load.image
source('~/igb/th_minimum.R')
source('~/igb/th_minimum.R')
source('~/igb/th_minimum.R')
source('~/igb/th_minimum.R')
source('~/igb/th_minimum.R')
source('~/igb/th_minimum.R')
?dget
source('~/igb/th_minimum.R')
source('~/igb/th_minimum.R')
T(debug = T)
?source
rm(a, b, bimage, h, image, k, n, peakfound ,temp, bimodtest, convolution, init, T)
source('~/igb/th_minimum.R')
source("https://github.com/glesica/lesica.com/raw/8ba08a23e4db18124fcbc31811f0249a8b9704fc/static/code/convolution.r")
rm(list = ls())
source("https://github.com/glesica/lesica.com/raw/8ba08a23e4db18124fcbc31811f0249a8b9704fc/static/code/convolution.r", local = TRUE)
rm(list = ls())
source("https://github.com/glesica/lesica.com/raw/8ba08a23e4db18124fcbc31811f0249a8b9704fc/static/code/convolution.r", echo = TRUE)
source("https://github.com/glesica/lesica.com/raw/8ba08a23e4db18124fcbc31811f0249a8b9704fc/static/code/convolution.r", echo = verbose)
rm(list = ls())
source(file = "./bimodtest.R")
source(file = "./bimodtest.R", chdir = TRUE)
source(file = "C:\Users\me\Documents\igb\bimodtest.R")
source(file = U"C:\Users\me\Documents\igb\bimodtest.R")
source(file = r"C:\Users\me\Documents\igb\bimodtest.R")
pathPrep <- function(path = "clipboard") {
y <- if (path == "clipboard") {
readClipboard()
} else {
cat("Please enter the path:\n\n")
readline()
}
x <- chartr("\\", "/", y)
writeClipboard(x)
return(x)
}
pathPrep <- function(path = "clipboard") {
y <- if (path == "clipboard") {
readClipboard()
} else {
cat("Please enter the path:\n\n")
readline()
}
x <- chartr("\\", "/", y)
writeClipboard(x)
return(x)
}
pathPrep()
source(file = "C:/Users/me/Documents/igb/bimodtest.R")
rm(list = ls())
source(file = "C:/Users/me/Documents/igb/bimodtest.R", chdir = T)
setwd(dir.choose())
setwd(choose.dir())
list.files()
rm(list=ls())
source('~/igb/th_minimum.R')
T("./cameraman.png")
source('~/igb/th_minimum.R')
T("./cameraman.png")
source('~/igb/th_minimum.R')
T("./cameraman.png")
convolution <- function(A, B) {
# Computes the convolution of two vectors.
#
# Args:
#   A, B: column vectors representing polynomial coefficients.
#
# Returns:
#   The coefficient vector resulting from multiplying the polynomial
#   represented by A by the polynomial represented by B.
Ap <- c(A, B*0)
Bp <- c(B, A*0)
C <- fft(Ap) * fft(Bp)
D <- round(fft(C, inverse=T))
E <- as.numeric(D)
R <- E/(length(A)+length(B))
return(R)
}
convolution(A = [1,3,1,3], B = [3, 1, 8])
convolution(A = (1,3,1,3), B = c(3, 1, 8))
convolution(A = c(1,3,1,3), B = c(3, 1, 8))
convolution(A = c(1,0,1), B = c(2,7))
library(stats)
stats::convolve(c(1,0,1), c(2, 7))
a <- c(1,0,1)
b <- c(2, 7)
stats::convolve(x = a, y = b)
stats::convolve(x = b, y = c(4, 6))
stats::convolve(x = a, y = b)
stats::convolve(x = a, y = b, type = "open")
stats::convolve(x = b, y = a, type = "open")
stats::convolve(x = c(1, 1, 1), y = c(1, 1, 0, 0, 0, 1, 1))
stats::convolve(x = c(1, 1, 1), y = c(1, 1, 0, 0, 0, 1, 1), type = "open")
source('~/igb/th_minimum.R')
source('~/igb/th_minimum.R')
rm(list=ls())
source('~/igb/th_minimum.R')
T("./cameraman.png", debug = T)
T("./cameraman.png", debug = TRUE)
T
source('~/igb/th_minimum.R')
rm(list=ls()+
)
rm(list=ls())
source('~/igb/th_minimum.R')
threshold("./cameraman.png")
source('~/igb/th_minimum.R')
image <- load.image(file = "./cameraman.png")
image <- B(image)
image_histogram <-hist(breaks = 255)
image_histogram <-hist(x = image,breaks = 255)
str(image_histogram)
source('~/igb/th_minimum.R')
threshold("./cameraman.png")
image_histogram$counts
stats::convolve(x = image_histogram$counts, y = matrix(1,3)/3) -> test
stats::convolve(x = image_histogram$counts, y = matrix(1,3)/3, type = "open") -> test
source('~/igb/th_minimum.R')
rm(list=ls())
source('~/igb/th_minimum.R')
threshold("./cameraman.png")
source('~/igb/th_minimum.R')
threshold("./cameraman.png", debug = T)
source('~/igb/th_minimum.R')
threshold("./cameraman.png", debug = T)
source('~/igb/th_minimum.R')
threshold("./cameraman.png", debug = T)
source('~/igb/th_minimum.R')
threshold("./cameraman.png", debug = T)
source('~/igb/th_minimum.R')
threshold("./cameraman.png", debug = T)
source('~/igb/th_minimum.R')
threshold("./cameraman.png", debug = F)
image <- load.image(file = "./cameraman.png")
dim(image)
image <- B(image)
dim(image)
myvec <- as.vector(image)
dim(myvec)
length(myvec)
myvec[1:32]
h <- hist(x = image, breaks = 255)
hc <- h$counts
length(h)
length(hc)
head(hc)
tail(hc)
head(hc, 43)
str(h)
head(h$breaks*255)
?hist
tail(hc, 32)
head(hc, 32)
str(h)
plot(h$breaks)
tail(h$breaks)
plot(h$breaks*255)
plot(h)
length(image < 0.025)
length(image)
dim(image)
417**417
417^417
417^2
length(as.vector(image) < 0.025)
str(image)
head(myvec)
tail(myvec)
summary(h$breaks)
length(as.vector(image) <= 0.025)
head(h$breaks*255)
head(image)
head(image*255)
head(t(image*255)
)
head(myvec)
myvec <- myvec*255
head(myvec)
tail(myvec)
head(myvec)
mymat <- as.matrix(image)
mymat[1:10, 1:10]
mymat[1:10, 1:10]*255
t(mymat[1:10, 1:10]*255)
mymat(1:10, 400:417)
mymat[1:10, 400:417]
mymat[1:10, 400:417]*255
noise(10,10)
library(imager)
noise(10,10)
noise <- array(runif(5*5*0*3),c(5,5,0,3))
plot(noise)
noise <- as.cimg(noise)
plot(nois)
plot(noise)
noise <- array(runif(5*5*1*3),c(5,5,0,3))
plot(noise)
noise <- array(runif(5*5*1*3),c(5,5,1,3))
plot(noise)
noise <- as.cimg(noise)
plot(noise)
plot(B(noise))
B(noise)
as.matrix(B(noise))
as.matrix(B(noise))*255
noise <- B(noise)
noise
hist(noise)
hist(noise, breaks = 255)
noise <- array(runif(10,10,1,1), c(5,5,1,1))
noise <- array(runif(10*10*1*1), c(5,5,1,1))
noise
noise <- as.cimg(noise)
noise
plot(noise)
hist(x = image, breaks = 0:255)
0:10
?hist
hist(x = image*255, breaks = 0:255)
source('~/igb/th_minimum.R')
rm(list=ls())
source('~/igb/th_minimum.R')
threshold("./cameraman.png")
threshold("./cameraman.png", debug = TRUE)
threshold("./cameraman.png")
image <- load.image("./cameraman.png")
image <- B(image)
ih <- hist(x = image*255, breaks = 0:255)
ih
str(ih)
head(ih$counts)
head(ih$counts, 20)
h <- matrix(1,3)/3
h
h <- c(1,3)/3
h
?seq
seq(1,3)
rep(3)
rep(3,3)
h <- rep(3, 3)/3
h
h <- rep(1, 3)/3
h
ho <- stats::convolve(ih$counts, h, type = "open")
head(ho)
ho <- stats::convolve(x = ih$counts, y = h, type = "open")
ho <- stats::convolve(y = ih$counts, x = h, type = "open")
ho <- stats::convolve(x = ih$counts, y = h, type = "open")
ho <- stats::convolve(y = ih$counts, x = h, type = "open")
ho <- stats::convolve(x = ih$counts, y = h, type = "open")
head(ho)
stats::convolve([1, 6, 3, 4], [1, 0, 1])
stats::convolve(c(1, 6, 3, 4), c(1, 0, 1), type = "open")
stats::convolve(c(1, 6, 3, 4, 7, 0), c(1, 0, 1), type = "open")
stats::convolve(c(1, 6, 3, 4, 7, 0), c(1, 0, 1), type = "open")
5%2
5 %% 2
6 %% 2
runif(5)
median(runif(5))
median(seq(7))
seq(7)
source("./middle_algorithm.R")
central(seq(8))
source("./middle_algorithm.R")
central(seq(6), )
central(seq(6), size = 1)
seq(6)
5/2
ceiling(5/2)
